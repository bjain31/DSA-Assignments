
Question 1

Write a function “insert_any()” for inserting a node at any given position of the linked list. Assume
position starts at 0.

Answer 1

#include <stdio.h>
#include <stdlib.h> 

struct node *head=NULL;
struct node
        {
    	int data;
    	struct node *next;
        };

void ins(int data)
        {
    	struct node *temp = (struct node*)malloc(sizeof(struct node));  //it will insert a new node to the start of the linked list
    	temp->data=data;
    	temp->next=head;
    	head=temp;
        }

void ins_at_pos_n(int data,int position)
    {
    	struct node *ptr = (struct node*)malloc(sizeof(struct node));
    	ptr->data=data;		//Creating a new node
    	int i;
    	struct node *temp=head;
    	if(position==1)
        {
        	ptr->next=temp;
    		head=ptr;
    		return;
    	}

    	for(i=1;i<position-1;i++)  //moving to the (n-1)th position node in the linked list
    	{
        	temp=temp->next;
    	}

    	ptr->next=temp->next;  //Make the newly created node point to next node of ptr temp
    	temp->next=ptr;  	//Make ptr temp point to newly created node in the linked list
}

void display()
{
    	struct node *temp=head;
    	printf("\nList: ");
    	while(temp!=NULL)
    	{
		    printf("\n%d ",temp->data);
            temp=temp->next;		
	}
}

int main()
{
    int i, n, pos, data;
    printf("Enter the number of nodes: \n");
    scanf("%d",&n);
    printf("Enter the data for the nodes: \n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&data);
        ins(data);
    }
    printf("Enter the data you want to insert in between the nodes: \n");
    scanf("%d",&data);
    printf("Enter the position at which you want to insert the nodes: \n");
    scanf("%d",&pos);
    if(pos>n)
    {
        printf("Enter a valid position: ");
    
    }
    else 
    {
        ins_at_pos_n(data,pos);
    	
    }
    display();
    return 0;
}


Question 2

Write a function “delete_beg()” for deleting a node from the beginning of the linked list.

Answer 2

#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;          
    struct node *next;  
}*head;


void createList(int n);
void delete_beg();
void displayList();



int main()
{
    int n, choice;

    printf("Enter the total number of nodes: ");
    scanf("%d", &n);
    createList(n);

    printf("\nData in the list \n");
    displayList();

    printf("\nPress 1 to delete first node: ");
    scanf("%d", &choice);

    /* Delete first node from list */
    if(choice == 1)
        delete_beg();

    printf("\nData in the list \n");
    displayList();

    return 0;
}

void createList(int n)
{
    struct node *newNode, *temp;
    int data, i;

    head = (struct node *)malloc(sizeof(struct node));

    if(head == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        printf("Enter the data of node 1: ");
        scanf("%d", &data);

        head->data = data; 
        head->next = NULL; 

        temp = head;

        for(i=2; i<=n; i++)
        {
            newNode = (struct node *)malloc(sizeof(struct node));

            if(newNode == NULL)
            {
                printf("Unable to allocate memory.");
                break;
            }
            else
            {
                printf("Enter the data of node %d: ", i);
                scanf("%d", &data);

                newNode->data = data; 
                newNode->next = NULL; 

                temp->next = newNode; 
                temp = temp->next;
            }
        }

        printf("LINKED LIST CREATED SUCCESSFULLY\n");
    }
}

void delete_beg()
{
    struct node *toDelete;

    if(head == NULL)
    {
        printf("List is already empty.");
    }
    else
    {
        toDelete = head;
        head = head->next;

        printf("\nData deleted = %d\n", toDelete->data);

        free(toDelete);

        printf("SUCCESSFULLY DELETED FIRST NODE FROM LIST\n");
    }
}

void displayList()
{
    struct node *temp;

    if(head == NULL)
    {
        printf("List is empty.");
    }
    else
    {
        temp = head;
        while(temp != NULL)
        {
            printf("Data = %d\n", temp->data); 
            temp = temp->next;                 
        }
    }
}



Question 3

Write a function “delete_end()” for deleting a node from the end of the linked list.

Answer 3

#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;          
    struct node *next;  
}*head;


void createList(int n);
void delete_end();
void displayList();



int main()
{
    int n, choice;

    printf("Enter the total number of nodes: ");
    scanf("%d", &n);
    createList(n);

    printf("\nData in the list \n");
    displayList();

    printf("\nPress 1 to delete first node: ");
    scanf("%d", &choice);

    /* Delete first node from list */
    if(choice == 1)
        delete_end();

    printf("\nData in the list \n");
    displayList();

    return 0;
}

void createList(int n)
{
    struct node *newNode, *temp;
    int data, i;

    head = (struct node *)malloc(sizeof(struct node));

    if(head == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        printf("Enter the data of node 1: ");
        scanf("%d", &data);

        head->data = data; 
        head->next = NULL; 

        temp = head;

        for(i=2; i<=n; i++)
        {
            newNode = (struct node *)malloc(sizeof(struct node));

            if(newNode == NULL)
            {
                printf("Unable to allocate memory.");
                break;
            }
            else
            {
                printf("Enter the data of node %d: ", i);
                scanf("%d", &data);

                newNode->data = data; 
                newNode->next = NULL; 

                temp->next = newNode; 
                temp = temp->next;
            }
        }

        printf("LINKED LIST CREATED SUCCESSFULLY\n");
    }
}

void delete_beg()
{
    struct node *toDelete, *secondLastNode;

    if(head == NULL)
    {
        printf("List is already empty.");
    }
    else
    {
        toDelete = head;
        secondLastNode = head; 
        while(toDelete->next != NULL)
        {
          secondLastNode = toDelete;
          toDelete = toDelete->next;
        }
        if(toDelete == head)
        {
          head = NULL;
        }
        else
        {
          secondLastNode->next = NULL; 
        }
        free(toDelete);

        printf("SUCCESSFULLY DELETED LAST NODE FROM LIST\n");
    }
}

void displayList()
{
    struct node *temp;

    if(head == NULL)
    {
        printf("List is empty.");
    }
    else
    {
        temp = head;
        while(temp != NULL)
        {
            printf("Data = %d\n", temp->data); 
            temp = temp->next;                 
        }
    }
}

